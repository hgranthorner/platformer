#+TITLE: Notes for Platformer

* Models
** [[file:src/player.h][Controls]]
- struct holding a set of keyboard bindings
** [[file:src/player.h][Player]]
- struct holding a "player" object
- Consists of a Rect, Controls, and current x and y velocity
** [[file:src/rect.h][Color]]
- struct containing 4 rgba ints
** [[file:src/rect.h][Rect]]
- struct containing an SDL_Rect and a color
** [[file:src/rect.h][Rects]]
- a container for multiple "Rect" structs
- consists of a pointer to a list of "Rect" structs and its size in ints
* Flow
1. Initialize SDL stuff
2. (While testing) initialize objects and player
3. Begin running the game
   1. Check to see if left or right keys are held
   2. Clear the screen
   3. Pop event off the queue and process
   4. Render platforms
   5. Move player
   6. Render player
   7. Check if level is complete
   8. Handle FPS control
   9. Render frame
4. Handle errors
5. Close program
* Loading Levels
** Description

A level can be loaded from a .txt file. The files should be saved in the /assets/levels/ path. The .txt file lines should correspond to the following format:

1. Background color
2. Player model
3. Number of platforms
4. The remaining lines should be the list of platforms in the level, one platform per line

** Annotated example

Here is an example file in table format. In an actual file, each row would only have the values separated by spaces.

Line 1 (Background Color):

| r     | g | b |   a |
|-------+---+---+-----|
| 0     | 0 | 0 | 255 |

Line 2 (Player. Color and controls are set by defaults):

| Rect rect      |    |
| SDL Rect shape |    |
| x              |  y |
|----------------+----+
| 50             | 50 |


Line 3 (Number of platforms):

5

Remaining lines (list of Rect):

| SDL Rect shape |     |      |      | Color color |   |   |     | int damaging |
|              x |   y |    w |    h |           r | g | b |   a |              |
|----------------+-----+------+------+-------------+---+---+-----+--------------|
|              0 |   0 | 1000 |   50 |         255 | 0 | 0 | 255 |            0 |
|             50 | 300 |   50 |   50 |         255 | 0 | 0 | 255 |            1 |
|            300 |  20 |   50 |   50 |         255 | 0 | 0 | 255 |            1 |
|            400 |  20 |   50 |   50 |         255 | 0 | 0 | 255 |            1 |
|            800 | 200 |  500 |   50 |         255 | 0 | 0 | 255 |            0 |

** Example file

Example file:

0 0 0 255
50 50
5
0 0 1000 255 0 0 255 0
50 300 50 255 0 0 255 1
300 20 50 255 0 0 255 1
400 20 50 255 0 0 255 1
800 200 500 255 0 0 255 0

* Tasks
** DONE Add camera
- How to handle this?
- [[http://lazyfoo.net/tutorials/SDL/30_scrolling/index.php][Lazy Foo scrolling tutorial]]
- Need to pass camera to rendering functions
- Done: now handles horizontal scrolling
** DONE Double jump restraint
** DONE Death and respawn mechanics
** DONE Improve collision
** DONE Parse level from file
** DONE Load level from file
** DONE Refactor get_line
** TODO Create level editor
** TODO Finish level
** TODO Handle level transitions
** TODO Add vertical camera

* Bugs
** TODO Add collision when hitting platform from the bottom
